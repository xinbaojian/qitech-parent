spring:
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DB_HOST:192.168.25.201}:${DB_PORT:5432}/${DB_NAME:test}?characterEncoding=utf8&useSSL=false&currentSchema=system_config
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:123456}
    druid:
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=1000
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计
      filters: stat,wall
      # 初始化时建立物理连接的个数
      initial-size: 5
      keep-alive: true
      # 最大连接池数量
      max-active: 100
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
      max-pool-prepared-statement-per-connection-size: 100
      # 获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      # 连接保持空闲而不被驱逐的最小时间
      min-evictable-idle-time-millis: 300000
      # 最小连接池数量
      min-idle: 5
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭
      pool-prepared-statements: true
      stat-view-servlet:
        # 允许所有ip 访问 druid
        allow:
        # druid连接池监控
        enabled: true
        login-username: qitech
        login-password: show@me@the@money
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: true
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 30000
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 用来检测连接是否有效的sql，要求是一个查询语句
      validation-query: select 'x'
      web-stat-filter:
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
  redis:
    database: ${REDIS_DATABASE:1}
    host: ${REDIS_HOST:192.168.25.201}
    port: ${REDIS_PORT:6379}
  http:
    # 过滤字符编码
    encoding:
      charset: UTF-8
      enabled: true
      force: true


eureka:
  instance:
    hostname: qitech-system-config-${random.value}
    instance-id: ${eureka.instance.hostname}:${server.port}:@project.version@
    ip-address: ${INSTANCE_IP:localhost}
    #服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
    #注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
    lease-expiration-duration-in-seconds: 2
    #服务刷新时间配置，每隔这个时间会主动心跳一次
    #默认30S
    lease-renewal-interval-in-seconds: 1
    prefer-ip-address: true
  client:
    serviceUrl:
      defaultZone: ${REGISTER_URL:http://192.168.25.201:8762/eureka/,http://192.168.25.201:8763/eureka/}
    healthcheck:
      enabled: true
    ##eureka client刷新本地缓存时间
    # 默认30s
    registryFetchIntervalSeconds: 5

# 设置oauth2 资源服务器
security:
  oauth2:
    resource:
      token-info-uri: ${TOKEN_INFO_URI:http://localhost:8000/oauth/check_token}
    client:
      access-token-uri: ${ACCESS_TOKEN_URI:http://localhost:8000/oauth/token}
      client-id: ${CLIENT_ID:web}
      # 这里必须是加密前的密钥
      client-secret: ${CLIENT_SECRET:websecret}
      grant-type: ${GRANT_TYPE:authorization_code,password,refresh_token}
      scope: ${SCOPE:all}

#配置是否启用Swagger
swagger:
  enable: ${SWAGGER_ENABLE:true}